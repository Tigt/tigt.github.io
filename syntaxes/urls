<figure>
  <figcaption>This is a fake URL with the parts labeled. Click on any part to jump to its explanation.</figcaption>
  <code><a class="protocol">scheme:</a><span class="hostname">username:password@<a class="subdomain">subdomain</a>.<a class="domain">domain</a>.<a class="sld">sld</a>.<a class="tld">tld</a></span><a class="port">:PORT</a><a class="path">/path/</a><a class="filename">filename.ext</a><a class="query-string>?query=string</a><a class="fragment">#fragment</a></code>
</figure>

<nav id="toc">
<h2>Table of Contents</h2>
<ol>
  <li>Domain name
    <ol>
      <li>Scheme</li>
      
      <li>User information
        <ol>
          <li>Username
          <li>Password
        </ol>
      </li>
      
      <li>Hostname
        <ol>
          <li>Subdomains</li>
          <li>Domain</li>
          <li>Second-level domain (SLD)</li>
          <li>Top-level domain (TLD)</li>
        </ol>
      </li>
      
      <li>Port number</li>
      
      <li>Path
        <ol>
          <li>Routing, folders, and whatnot</li>
          <li>Filename</li>
          <li>File extension</li>
        </ol>
      </li>
      
      <li>Query strings
        <ol>
          <li>Keys</li>
          <li>Values</li>
        </ol>
      </li>
      
      <li>Fragment identifiers</li>
</ol>
</nav>

<h2>Domain name</h2>

<p>The first portion of a URL uses the Domain Name System (DNS) to find out what server the client should talk to. You can bypass this by using a direct IP address, either v4 or v6.</p>

<figure>
  <code>http://192.0.2.0/path/file.ext</code>
  <code>http://[2001:db8:0:1]/path/file.ext</code>
</figure>

<p>However, this is ugly and also not very technically sound (machines change IP addresses, what if you want to add a caching layer, what if you want to change providers, etc.), so you generally want an actual domain name.</p>

<h3>Scheme</h3>

<p>All <b>protocols</b> are <b>schemes</b>, but not all schemes are protocols. Common protocols are:</p>

<dl>
  <dt><code>http://</code></dt>
  <dd>HyperText Transfer Protocol</dd>
  
  <dt><code>https://</code></dt>
  <dd>Secure HyperText Transfer Protocol</dd>
  
  <dt><code>file://</code></dt>
  <dd>
  <li><code>
</dl>

<p>Some common schemes that are <strong>not</strong> protocols are:</p>

<dl>
  <dt><code>mailto:</code></dt>
  <dt><code>javascript:</code></dt>
  <dt><code>tel:</code></dt>
</dl>

<p>URLs do not necessarily need to specify a scheme, like <code>//example.org/whatever</code>. This will request the URL using whatever scheme the current page is using. You will often see this concept described as "protocol-relative URLs," and is most often used to avoid mixed-content warnings from having part of a HTTPS page requested over regular HTTP.</p>

<p>Apple has "app protocols" be a thing you can register on iOS, which produce hyperlinks that particular apps can intercept and use if they're installed. This doesn't work super well, since if anybody without the app (or without iOS) clicks on such a link, they get taken to an error page.</p>
